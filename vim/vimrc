"      _                    
"__   _(_)_ __ ___  _ __ ___ 
"\ \ / / | '_ ` _ \| '__/ __|
" \ V /| | | | | | | | | (__ 
"(_)_/ |_|_| |_| |_|_|  \___|
                            
" Set path
set path=.,**


" Set leader
let mapleader=" "
 
" Increase history to 200
set history=200
" Map jk to escape
inoremap jk <Esc>
" Deactivate line numbers
set nonumber

" ################# Tabs and Spaces #################
" number of spaces to replace a tab with when expandtab
set tabstop=4
" Replace spaces with tabs
set expandtab
set softtabstop=4
set shiftwidth=4
set autoindent

" ################################################## 


" ################# Misc #################

" Disable bell (also disable in .inputrc)
set noerrorbells
set vb t_vb=


" turn col and row position on in bottom right
set ruler " see ruf for formatting

" prevents truncated yanks, deletes, etc.
set viminfo='20,<1000,s1000

" Python Specific Formatting Options
autocmd FileType python setlocal expandtab
autocmd FileType python setlocal tabstop=4
autocmd FileType python setlocal shiftwidth=4
autocmd FileType python setlocal softtabstop=4


" Autosave Racket Files
autocmd TextChanged,TextChangedI *.rkt if &modified | silent! write | endif


" Paste from windows clipboard
nnoremap <space>p :.!powershell.exe -c "Get-Clipboard"<CR>

" stop complaints about switching buffer with changes
set hidden

" Turn on syntax highlighting
syntax on
" Highlight cursor line
" set cursorline
" :highlight CursorLine ctermbg=grey

"Default color scheme for vimdiff
if &diff
    colorscheme mycolorscheme
endif

" Turn off swap files
set noswapfile

" ################ Set tabstop, softtabstop and shiftwidth to the same value ################
" http://vimcasts.org/episodes/tabs-and-spaces/


command! -nargs=* Stab call Stab()
function! Stab()
    let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
    if l:tabstop > 0
        let &l:sts = l:tabstop
        let &l:ts = l:tabstop
        let &l:sw = l:tabstop
    endif
    call SummarizeTabs()
    endfunction

function! SummarizeTabs()
    try
        echohl ModeMsg
        echon 'tabstop='.&l:ts
        echon ' shiftwidth='.&l:sw
        echon ' softtabstop='.&l:sts
        if &l:et
            echon ' expandtab'
        else
            echon ' noexpandtab'
        endif
        finally
            echohl None
    endtry
endfunction

" ################################################################################## 

" Source: https://gist.github.com/romainl/047aca21e338df7ccf771f96858edb86

nnoremap <leader>r :g//#<Left><Left>


" make list-like commands more intuitive
function! CCR()
    let cmdline = getcmdline()
    if cmdline =~ '\v\C^(ls|files|buffers)'
        " like :ls but prompts for a buffer command
        return "\<CR>:b"
    elseif cmdline =~ '\v\C/(#|nu|num|numb|numbe|number)$'
        " like :g//# but prompts for a command
        return "\<CR>:"
    elseif cmdline =~ '\v\C^(dli|il)'
        " like :dlist or :ilist but prompts for a count for :djump or :ijump
        return "\<CR>:" . cmdline[0] . "j  " . split(cmdline, " ")[1] . "\<S-Left>\<Left>"
    elseif cmdline =~ '\v\C^(cli|lli)'
        " like :clist or :llist but prompts for an error/location number
        return "\<CR>:sil " . repeat(cmdline[0], 2) . "\<Space>"
    elseif cmdline =~ '\C^old'
        " like :oldfiles but prompts for an old file to edit
        set nomore
        return "\<CR>:sil se more|e #<"
    elseif cmdline =~ '\C^changes'
        " like :changes but prompts for a change to jump to
        set nomore
        return "\<CR>:sil se more|norm! g;\<S-Left>"
    elseif cmdline =~ '\C^ju'
        " like :jumps but prompts for a position to jump to
        set nomore
        return "\<CR>:sil se more|norm! \<C-o>\<S-Left>"
    elseif cmdline =~ '\C^marks'
        " like :marks but prompts for a mark to jump to
        return "\<CR>:norm! `"
    elseif cmdline =~ '\C^undol'
        " like :undolist but prompts for a change to undo
        return "\<CR>:u "
    else
        return "\<CR>"
    endif
endfunction

" map '<CR>' in command-line mode to execute the function above
cnoremap <expr> <CR> CCR()

" Turn on undofile
" I suspect this is the reason I've been seeing .file.un~ everytime I edit a
" file
"if has("vms")
"    set nobackup
"else
"    set backup
"    if has('persistent_undo')
"        set undofile
"    endif
"endif



" Plugins - Pack
packadd! matchit


" Plugins - vim-plug
call plug#begin()

" List your plugins here
Plug 'andymass/vim-matchup'

call plug#end()

" Set list to show nbsp
set listchars+=nbsp:_

" Fix spaces command
command! FixSpaces %s/\%u00A0\|\%u2000-\%u200A\|\%u202F\|\%u3000/ /g
" ##################################################################################

" I haven
augroup custom_foldmethod
	autocmd!
	autocmd Filetype json set foldmethod=syntax
augroup END 

